{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api' // Your Django API base URL\n});\n\n// This is an \"interceptor\". It's a function that runs before every single request.\naxiosInstance.interceptors.request.use(config => {\n  // Get the token from localStorage\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    // If the token exists, add the 'Authorization' header to the request\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"sources":["D:/rimssms/college-frontend/src/api/axiosConfig.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api', // Your Django API base URL\r\n});\r\n\r\n// This is an \"interceptor\". It's a function that runs before every single request.\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    // Get the token from localStorage\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      // If the token exists, add the 'Authorization' header to the request\r\n      config.headers['Authorization'] = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,2BAA2B,CAAE;AACxC,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAASH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}