{"ast":null,"code":"var _jsxFileName = \"D:\\\\rimssms\\\\college-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport axios from '../api/axiosConfig.js';\nimport { useNavigate } from 'react-router-dom';\n\n// 1. Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 2. Create the provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Get token from localStorage if it exists\n  const [authToken, setAuthToken] = useState(localStorage.getItem('authToken'));\n  const navigate = useNavigate();\n\n  // The login function\n  const login = async (username, password) => {\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/admin/login/', {\n        username,\n        password\n      });\n      if (response.data.token) {\n        // Store token in state and localStorage\n        setAuthToken(response.data.token);\n        localStorage.setItem('authToken', response.data.token);\n        // Redirect to the dashboard after login\n        navigate('/');\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      alert('Login failed! Please check your username and password.');\n    }\n  };\n\n  // The logout function\n  const logout = () => {\n    // Clear token from state and localStorage\n    setAuthToken(null);\n    localStorage.removeItem('authToken');\n    // Redirect to login page\n    navigate('/login');\n  };\n\n  // The value provided to consuming components\n  const value = {\n    authToken,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n// 3. Create a custom hook to use the context easily\n_s(AuthProvider, \"KJ9tvr8lBsvXti2/JDmsAN9djCc=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","localStorage","getItem","navigate","login","username","password","response","post","data","token","setItem","error","console","alert","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/rimssms/college-frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\nimport axios from '../api/axiosConfig.js';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// 1. Create the context\r\nconst AuthContext = createContext();\r\n\r\n// 2. Create the provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  // Get token from localStorage if it exists\r\n  const [authToken, setAuthToken] = useState(localStorage.getItem('authToken'));\r\n  const navigate = useNavigate();\r\n\r\n  // The login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/admin/login/', {\r\n        username,\r\n        password,\r\n      });\r\n\r\n      if (response.data.token) {\r\n        // Store token in state and localStorage\r\n        setAuthToken(response.data.token);\r\n        localStorage.setItem('authToken', response.data.token);\r\n        // Redirect to the dashboard after login\r\n        navigate('/');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      alert('Login failed! Please check your username and password.');\r\n    }\r\n  };\r\n\r\n  // The logout function\r\n  const logout = () => {\r\n    // Clear token from state and localStorage\r\n    setAuthToken(null);\r\n    localStorage.removeItem('authToken');\r\n    // Redirect to login page\r\n    navigate('/login');\r\n  };\r\n\r\n  // The value provided to consuming components\r\n  const value = {\r\n    authToken,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// 3. Create a custom hook to use the context easily\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,uBAAuB;AACzC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EAC7E,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMY,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,oCAAoC,EAAE;QACtEH,QAAQ;QACRC;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;QACvB;QACAV,YAAY,CAACO,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QACjCT,YAAY,CAACU,OAAO,CAAC,WAAW,EAAEJ,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QACtD;QACAP,QAAQ,CAAC,GAAG,CAAC;MACf;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCE,KAAK,CAAC,wDAAwD,CAAC;IACjE;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAf,YAAY,CAAC,IAAI,CAAC;IAClBC,YAAY,CAACe,UAAU,CAAC,WAAW,CAAC;IACpC;IACAb,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMc,KAAK,GAAG;IACZlB,SAAS;IACTK,KAAK;IACLW;EACF,CAAC;EAED,oBAAOrB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAAEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;;AAED;AAAAxB,EAAA,CA7CaF,YAAY;EAAA,QAGNJ,WAAW;AAAA;AAAA+B,EAAA,GAHjB3B,YAAY;AA8CzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOnC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAAC8B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}